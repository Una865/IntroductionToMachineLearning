# -*- coding: utf-8 -*-
"""DTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/109BXlnvkTHeMC5N7mx17GFc_7fQGarPX
"""

import numpy as np
import pandas as pd

from google.colab import files
uploaded = files.upload()



cols = ['sepal_length','sepal_width','petal_length','petal_width','type']
data = pd.read_csv("iris.csv",skiprows = 1,header = None, names = cols)
data.head(10)

data.loc[data['type'] == 'Setosa','type'] = 0
data.loc[data['type'] == 'Versicolor','type'] = 1
data.loc[data['type'] == 'Virginica','type'] = 2

data.head(5)

"""Node class"""

class Node():
  def __init__(self,feature_index = None, treshold = None, left = None, right = None , inf_gain=None, value = None):
    self.root = None
    # there are two different kinds of nodes: decision nodes and leaf
    self.feature_index = feature_index
    self.treshold = treshold
    self.left = left
    self.right = right
    self.inf_gain = inf_gain
    #for the leaf we only need the value
    self.value = value

"""Tree class"""

from typing import ByteString
class DecisionTreeClassifier():
  def __init__(self, min_samples_split = 2, max_depth = 2):
    self.root = None

    self.min_samples_split = min_samples_split
    self.max_depth = max_depth

  def build_tree(self,dataset, curr_depth = 0):
    X,Y = dataset[:,:-1],dataset[:,-1]
    num_samples, num_features = np.shape(X)

    if num_samples>=self.min_samples_split and curr_depth<=self.max_depth:
      best_split = self.get_best_split(dataset,num_samples,num_features)

      if best_split["inf_gain"]>0:
        left_subtree = self.build_tree(best_split["dataset_left"],curr_depth+1)

        right_subtree = self.build_tree(best_split["dataset_right"],curr_depth+1)

        return Node(best_split["feature_index"],best_split["treshold"],
                    left_subtree,right_subtree,best_split["inf_gain"])
        
    leaf_value = self.calculate_leaf_value(Y)
    return Node(value = leaf_value)

  def get_best_split(self,dataset,num_samples,num_features):

    best_split ={}
    max_inf_gain = -float("inf")

    for feature_index in range(num_features):
      feature_values = dataset[:,feature_index]
      possible_tresholds = np.unique(feature_values)
      for treshold in possible_tresholds:

        dataset_left,dataset_right = self.split(dataset, feature_index,treshold)

        if len(dataset_left)>0 and len(dataset_right)>0:

          y,y_left,y_right = dataset[:, -1], dataset_left[:, -1], dataset_right[:, -1]
          curr_inf_gain = self.information_gain(y,y_left,y_right,"gini")

          if curr_inf_gain > max_inf_gain:
            best_split["feature_index"] = feature_index
            best_split["treshold"] = treshold
            best_split["dataset_left"] = dataset_left
            best_split["dataset_right"] = dataset_right
            best_split["inf_gain"] = curr_inf_gain
            max_inf_gain = curr_inf_gain

    return best_split

  def split(self,dataset,feature_index,treshold):
    dataset_left = np.array([row for row in dataset if row[feature_index]<=treshold])
    dataset_right = np.array([row for row in dataset if row[feature_index]>treshold])

    return dataset_left,dataset_right

  def information_gain(self,parent,left_ch,right_ch, mode = "entropy"):
    w_left = len(left_ch)/len(parent)
    w_right = len(right_ch)/len(parent)

    if mode == "gini":
      gain = self.gini_index(parent) - (w_left*self.gini_index(left_ch)+w_right*self.gini_index(right_ch))
    else:
      gain = self.entropy(parent) - (w_left*self.entropy(left_ch)+w_right*self.entropy(right_ch))
    return gain


  def entropy(self,y):
    labels = np.unique(y)
    entropy = 0
    for cls in labels:
      p_cls = len(y[y==cls])/len(y)
      entropy += -p_cls*np.log2(p_cls)
    return entropy

  def gini_index(self,y):
    labels = np.unique(y)
    gini = 0
    for cls in labels:
      p_cls = len(y[y==cls])/len(y)
      gini += p_cls**2
    return 1-gini

  def calculate_leaf_value(self,Y):
    Y = list(Y)
    return max(Y,key = Y.count)
  
  def print_tree(self, tree = None, indent = " "):

    if not tree:
      tree = self.root

    if tree.value is not None:
      print(tree.value)
    else:
      print("X_"+str(tree.feature_index), "<=", tree.treshold, "?", tree.inf_gain)
      print("%sleft:" % (indent), end="")
      self.print_tree(tree.left, indent + indent)
      print("%sright:" % (indent), end="")
      self.print_tree(tree.right, indent + indent)

  def fit(self, X, Y):
        ''' function to train the tree '''
        
        dataset = np.concatenate((X, Y), axis=1)
        self.root = self.build_tree(dataset)
    
  def predict(self, X):
        ''' function to predict new dataset '''
        
        preditions = [self.make_prediction(x, self.root) for x in X]
        return preditions
    
  def make_prediction(self, x, tree):
        ''' function to predict a single data point '''
        
        if tree.value!=None: return tree.value
        feature_val = x[tree.feature_index]
        if feature_val<=tree.treshold:
            return self.make_prediction(x, tree.left)
        else:
            return self.make_prediction(x, tree.right)

X = data.iloc[:, :-1].values
Y = data.iloc[:, -1].values.reshape(-1,1)
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.2, random_state=41)

classifier = DecisionTreeClassifier(min_samples_split=3, max_depth=3)
classifier.fit(X_train,Y_train)
classifier.print_tree()

Y_pred = classifier.predict(X_test) 
from sklearn.metrics import accuracy_score
Y_pred = np.array(Y_pred)
Y_pred = np.reshape(Y_pred,(Y_pred.shape[0],1))
acc = 0
for i in range(Y_pred.shape[0]):
   if Y_pred[i,0] == Y_test[i,0]:
      acc+=1
print(acc/30)